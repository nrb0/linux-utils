#!/usr/bin/python3

from datetime import datetime
from pathlib import Path

import argparse
import json
import logging
import os
import shutil
import subprocess

#-------------------------------------------------------------------------------

# Global names
AppName = 'copy-saves'
Manufacturer = 'nrbo'

# Global paths
userHomeDirectory = Path(os.getenv("HOME"))
userConfigDirectory = userHomeDirectory / ".config"
manufacturerConfigDirectory = userConfigDirectory / "nrbo"
appConfigDirectory = manufacturerConfigDirectory / AppName
appConfigFile = appConfigDirectory / "config.json"
appLogFile = appConfigDirectory / (AppName + ".log")

backupsTag = "backups"
destinationTag = "destination"
nameTag = "name"
sourceTag = "source"

#-------------------------------------------------------------------------------

def readConfig():
    if not appConfigFile.exists():
        return {}

    with open(appConfigFile, 'r') as openedFile:
        jsonObject = json.load(openedFile)
        return jsonObject

    return {}

#-------------------------------------------------------------------------------

def writeConfig():
    jsonObject = json.dumps(globalConfiguration, indent=4)
    with open(appConfigFile, "w") as outputFile:
        outputFile.write(jsonObject)


#-------------------------------------------------------------------------------

# Create app directory
appConfigDirectory.mkdir(parents=True, exist_ok=True)
globalConfiguration = readConfig()

# Create logger
log = logging.getLogger(AppName)
log.setLevel(logging.DEBUG)

# Create formatter and add it to the handlers
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

# Create file handler which logs even debug messages
fileHandler = logging.FileHandler(appLogFile)
fileHandler.setLevel(logging.DEBUG)
fileHandler.setFormatter(formatter)
log.addHandler(fileHandler)

# Create console handler with a higher log level
consoleHandler = logging.StreamHandler()
consoleHandler.setLevel(logging.ERROR)
consoleHandler.setFormatter(formatter)
log.addHandler(consoleHandler)

#-------------------------------------------------------------------------------

def copyDirectory(sourcePath, destinationPath):
    rsyncProcess = subprocess.run(["rsync", "-Pav", sourcePath, destinationPath],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT)

    outputString = str(rsyncProcess.stdout.decode("utf-8"))
    log.info(outputString)

#-------------------------------------------------------------------------------

def processSaves():
    if backupsTag in globalConfiguration:
        backupTasks = globalConfiguration[backupsTag]
        for backupTask in backupTasks:
            processTask(backupTask)

#-------------------------------------------------------------------------------

def processTask(taskConfiguration):
    isMalformed = False
    if not nameTag in taskConfiguration:
        log.error("Missing \'{}\' field in configuration".format(nameTag))
        log.info("Skipping...")
        return

    taskName = taskConfiguration[nameTag]
    log.info("Processing " + taskName)

    if not sourceTag in taskConfiguration:
        log.error("Missing \'{}\' field in configuration".format(sourceTag))
        log.info("Skipping {}".format(taskName))
        return

    if not destinationTag in taskConfiguration:
        log.error("Missing \'{}\' field in configuration".format(destinationTag))
        log.info("Skipping {}".format(taskName))
        return

    sourcePath = Path(taskConfiguration[sourceTag])
    if not sourcePath.exists():
        log.error("Source path does not exist")
        log.error("\"{}\" not found!".format(str(sourcePath)))
        log.info("Skipping {}".format(taskName))
        return

    destinationPath = Path(taskConfiguration[destinationTag])
    if not destinationPath.exists():
        log.error("Destination path does not exist")
        log.error("\"{}\" not found!".format(str(destinationPath)))
        log.info("Skipping {}".format(taskName))
        return

    processDirectory(sourcePath, destinationPath)

#-------------------------------------------------------------------------------

def processDirectory(sourcePath, destinationParentPath):
    nowString = datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
    copyDirectory(sourcePath, destinationParentPath)


#-------------------------------------------------------------------------------
# MAIN
#-------------------------------------------------------------------------------

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Backs up directories')
    parser.add_argument('--verbose', '-v', action='count', default=0)
    args = parser.parse_args()

    if args.verbose == 1:
        consoleHandler.setLevel(logging.INFO)
    elif args.verbose >= 2:
        consoleHandler.setLevel(logging.DEBUG)

    log.info("Starting copy-saves")

    processSaves()

    log.info("All copy-saves tasks done!")

    for handler in log.handlers:
        handler.close()
        log.removeFilter(handler)
